#include <SFML/Graphics.hpp>
#include <iostream>
#include <vector>
#include <ctime>
#include <cstdlib>

const int Empty = 0;
const int Mine = -1;
const int Flagged = -2;

class Cell {
public:
    int value;  // Значение клетки: Mine, Empty или Flagged
    bool open;  // Открыта ли клетка
    bool flagged; // Помечена ли клетка флагом

    Cell() : value(Empty), open(false), flagged(false) {}
};

class Board {
public:
    std::vector<std::vector<Cell>> cells;
    int width, height;
    int mines;
    int flaggedMines;  // Количество правильно помеченных мин
    bool firstClick;
    bool gameOver;  // Флаг окончания игры
    bool gameWon;   // Флаг выигрыша
    sf::Clock gameClock;

    Board(int width, int height, int mines)
        : width(width), height(height), mines(mines), flaggedMines(0), firstClick(true), gameOver(false), gameWon(false) {
        cells.resize(height, std::vector<Cell>(width));
    }

    void generate(int x, int y) {
        srand(time(0));

        // Генерация мин, избегая клетки, на которой был первый клик
        for (int i = 0; i < mines; ++i) {
            int xx, yy;
            do {
                xx = rand() % width;
                yy = rand() % height;
            } while ((xx == x && yy == y) || cells[yy][xx].value == Mine);
            cells[yy][xx].value = Mine;
            incrementAdjacentCells(xx, yy);
        }
        firstClick = false;
    }

    void incrementAdjacentCells(int x, int y) {
        for (int i = -1; i <= 1; ++i) {
            for (int j = -1; j <= 1; ++j) {
                if (i == 0 && j == 0) continue;
                int adjX = x + j, adjY = y + i;
                if (adjX >= 0 && adjX < width && adjY >= 0 && adjY < height && cells[adjY][adjX].value != Mine) {
                    cells[adjY][adjX].value++;
                }
            }
        }
    }

    void openCell(int x, int y) {
        if (cells[y][x].open || gameOver || gameWon) return; // Если клетка уже открыта или игра закончена

        cells[y][x].open = true;

        // Если клетка с миной
        if (cells[y][x].value == Mine) {
            gameOver = true;  // Игра завершена, если попали на мину
            return;
        }

        // Если клетка пустая, открываем все соседние клетки
        if (cells[y][x].value == Empty) {
            openAdjacentCells(x, y);
        }

        // Проверка на победу (все клетки без мин открыты)
        checkForWin();
    }

    void openAdjacentCells(int x, int y) {
        for (int i = -1; i <= 1; ++i) {
            for (int j = -1; j <= 1; ++j) {
                int adjX = x + j, adjY = y + i;
                if (adjX >= 0 && adjX < width && adjY >= 0 && adjY < height && !cells[adjY][adjX].open && cells[adjY][adjX].value != Mine) {
                    openCell(adjX, adjY); // Рекурсивно открываем соседние клетки
                }
            }
        }
    }

    void flagCell(int x, int y) {
        if (!cells[y][x].open && !gameOver && !gameWon) {
            // Переключаем флаг на клетке
            cells[y][x].flagged = !cells[y][x].flagged;

            // Если флаг был поставлен на мину, увеличиваем счётчик найденных мин
            if (cells[y][x].value == Mine && cells[y][x].flagged) {
                flaggedMines++;
            }
            // Если флаг убран с мины, уменьшаем счётчик найденных мин
            else if (cells[y][x].value == Mine && !cells[y][x].flagged) {
                flaggedMines--;
            }
        }

        // Проверка на победу после установки флага
        checkForWin();
    }

    void checkForWin() {
        bool allMinesFlagged = true;

        // Проходим по всем клеткам и проверяем, были ли все мины помечены флагами
        for (int y = 0; y < height; ++y) {
            for (int x = 0; x < width; ++x) {
                // Если это мина и она не помечена флагом
                if (cells[y][x].value == Mine && !cells[y][x].flagged) {
                    allMinesFlagged = false;
                }
            }
        }

        // Если все мины помечены флагами, игра выиграна
        if (allMinesFlagged) {
            gameWon = true;
        }
    }

void display(sf::RenderWindow &window, sf::Time elapsedTime) {
    sf::Text timerText;  // Объявляем переменную только один раз

    for (int y = 0; y < height; ++y) {
        for (int x = 0; x < width; ++x) {
            auto &cell = cells[y][x];
            sf::RectangleShape cellShape(sf::Vector2f(30.f, 30.f));
            cellShape.setPosition(x * 30.f, y * 30.f);
            
            // Если клетка открыта
            if (cell.open) {
                if (cell.value == Mine) {
                    cellShape.setFillColor(sf::Color::Red); // Мин
                } else {
                    cellShape.setFillColor(sf::Color::White); // Пустая клетка с цифрой
                }
            } else {
                cellShape.setFillColor(sf::Color(169, 169, 169)); // Закрытая клетка
            }
            
            window.draw(cellShape);

            // Отображение флага
            if (cell.flagged) {
                sf::CircleShape flagShape(10.f, 3);
                flagShape.setPosition(x * 30.f + 7.f, y * 30.f + 7.f);
                flagShape.setFillColor(sf::Color::Blue);
                window.draw(flagShape);
            }

            // Если клетка открыта и она не является миной
            if (cell.open && cell.value > 0) {
                sf::Text text;
                text.setFont(font);
                text.setString(std::to_string(cell.value));  // Отображаем количество мин рядом
                text.setCharacterSize(18);
                text.setFillColor(sf::Color::Black); // Цвет цифры
                text.setPosition(x * 30.f + 10.f, y * 30.f + 5.f); // Позиция текста в клетке
                window.draw(text);
            }

            // Если игра окончена, показываем все мины (если они не были открыты)
            if (gameOver) {
                if (cell.value == Mine && !cell.open) {
                    cellShape.setFillColor(sf::Color::Red); // Мин
                    window.draw(cellShape);
                    
                    // Рисуем флаг, если клетка была помечена флагом
                    if (cell.flagged) {
                        sf::CircleShape flagShape(10.f, 3);
                        flagShape.setPosition(x * 30.f + 7.f, y * 30.f + 7.f);
                        flagShape.setFillColor(sf::Color::Blue);
                        window.draw(flagShape);
                    }
                }
            }
        }
    }

    // Отображаем таймер
    timerText.setFont(font);
    timerText.setString("Time: " + std::to_string((int)elapsedTime.asSeconds()) + "s");
    timerText.setCharacterSize(20);
    timerText.setFillColor(sf::Color::Black);
    timerText.setPosition(10.f, 10.f);
    window.draw(timerText);
}


void displayEndGameMessage(sf::RenderWindow &window, const std::string &message) {
    // Создаем строку с результатами
    std::string resultMessage = message + "\n";  // message это либо "Вы выиграли!" или "Игра окончена!"
    resultMessage += "Time: " + std::to_string((int)gameClock.getElapsedTime().asSeconds()) + "s\n" +
                     "Mines: " + std::to_string(mines) + "\n" +
                     "Mines found: " + std::to_string(flaggedMines);

    // Создаем новое окно для отображения результатов
    sf::RenderWindow resultWindow(sf::VideoMode(400, 300), "Game Results");

    // Создаем текст для вывода результатов
    sf::Text resultText;
    
    // Проверяем, был ли шрифт загружен
    if (!Board::fontLoaded) {
        std::cerr << "Ошибка: шрифт не загружен!" << std::endl;
        resultText.setFont(sf::Font());  // Если шрифт не загружен, используем дефолтный шрифт
    } else {
        resultText.setFont(Board::font);  // Если шрифт загружен, используем его
    }

    resultText.setString(resultMessage);
    resultText.setCharacterSize(25);
    resultText.setFillColor(sf::Color::Black);
    resultText.setPosition(400.f / 2 - resultText.getLocalBounds().width / 2, 
                           300.f / 2 - resultText.getLocalBounds().height / 2);

    // Основной цикл для окна результатов
    while (resultWindow.isOpen()) {
        sf::Event resultEvent;
        while (resultWindow.pollEvent(resultEvent)) {
            if (resultEvent.type == sf::Event::Closed) {
                resultWindow.close();  // Закрытие окна по событию
            }
        }

        resultWindow.clear(sf::Color::White);  // Очистка окна
        resultWindow.draw(resultText);         // Отображаем текст с итогами
        resultWindow.display();                // Обновляем окно
    }
}


    static sf::Font font;
    static bool fontLoaded;
};

sf::Font Board::font;
bool Board::fontLoaded = false;

class GameWindow : public sf::RenderWindow {
public:
    GameWindow(int width, int height) 
        : sf::RenderWindow(sf::VideoMode(width * 30, height * 30), "Minesweeper") {
        setVerticalSyncEnabled(false);

        // Загрузка шрифта
        if (!Board::fontLoaded) {
            Board::fontLoaded = Board::font.loadFromFile("arial.ttf");
            if (!Board::fontLoaded) {
                std::cerr << "Error: Could not load font!" << std::endl;
            }
        }
    }

    void runGame() {
        int width, height, mines;
        std::cout << "Select difficulty level (1 - Easy, 2 - Medium, 3 - Hard): ";
        int difficulty;
        std::cin >> difficulty;

        // Устанавливаем размеры поля и количество мин в зависимости от уровня сложности
        switch (difficulty) {
            case 1: 
                width = 9; height = 9; mines = 10; break;
            case 2: 
                width = 16; height = 16; mines = 40; break;
            case 3: 
                width = 30; height = 30; mines = 99; break;
            default: 
                std::cout << "Invalid choice! Defaulting to Easy." << std::endl; 
                width = 9; height = 9; mines = 10; break;
        }

        Board board(width, height, mines);
        sf::Clock clock;
        sf::Time elapsedTime;

        while (isOpen() && !board.gameOver && !board.gameWon) {
            sf::Event event;
            while (pollEvent(event)) {
                if (event.type == sf::Event::Closed) {
                    close();
                }

                if (event.type == sf::Event::MouseButtonPressed) {
                    int x = event.mouseButton.x / 30;
                    int y = event.mouseButton.y / 30;

                    if (event.mouseButton.button == sf::Mouse::Left) {
                        if (board.firstClick) {
                            board.generate(x, y);
                        }
                        board.openCell(x, y);
                    } else if (event.mouseButton.button == sf::Mouse::Right) {
                        board.flagCell(x, y);
                    }
                }
            }

            elapsedTime = clock.getElapsedTime();

            clear();
            board.display(*this, elapsedTime);
            display();
        }

        // После завершения игры отображаем сообщение
        if (board.gameOver) {
            board.displayEndGameMessage(*this, "Game Over!");
        } else if (board.gameWon) {
            board.displayEndGameMessage(*this, "You Won!");
        }

        clear();
        board.display(*this, elapsedTime);
        display();
    }
};

int main() {
    GameWindow window(20, 20);
    window.runGame();
    return 0;
}
